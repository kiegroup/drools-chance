/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.drools.pmml_4_0.descr.*;
import org.drools.pmml_4_0.*;
import org.mvel2.templates.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

global StringBuilder theory;
global TemplateRegistry registry;
global Map fld2var;
global PMML4Wrapper utils;



 function void applyTemplate(String templateName, Object context, TemplateRegistry registry, Map vars, StringBuilder builder) {
    CompiledTemplate template = (CompiledTemplate) registry.getNamedTemplate(templateName);
       if ( templateName.contains("svm")) {
           String t = TemplateRuntime.execute(template, context, vars).toString();
           System.err.println("TEMPLATE EXECT " + templateName +  " with params " + vars );
           System.err.println( t );
           builder.append( t );
       } else {
           builder.append( TemplateRuntime.execute(template, context, vars) );
       }
	//builder.append(TemplateRuntime.execute(template, context, new org.mvel2.integration.impl.DefaultLocalVariableResolverFactory()));
 }




rule "Invalid_meta"
salience -999
dialect "mvel"
when
then
    //System.err.println("Found Mined Field " + $fld.name );
    HashMap map = new HashMap();
    applyTemplate("modelInvalidAnswer.drlt", utils, registry, map, theory);
    applyTemplate("modelRevalidate.drlt", utils, registry, map, theory);
end


rule "Questionnaire"
dialect "mvel"
when
    MiningSchema( $inputs : miningFields )
then
    //System.err.println("Found Mined Field " + $fld.name );
    HashMap map = new HashMap();
        map.put("fields",$inputs);
        map.put("model",utils.context);
    applyTemplate("modelQuestionnaire.drlt", utils, registry, map, theory);

    applyTemplate("modelAddQuestionsToQuestionnaire.drlt", utils, registry, map, theory);
end






rule "Question"
dialect "java"
when
    MiningSchema(  $inputs : miningFields )
    $fld : MiningField( this memberOf $inputs,  $name : name, usageType == null || usageType == FIELDUSAGETYPE.ACTIVE )
    TypeOfField( name == $name, $type : dataType )
    $dfld : DataField( $vsize : values.size() == 0, name == $name, $full : displayName )
then
    String fullS = ""+$full;  //avoiding obscure MVEL problem in choosing between overloaded versions of format() in PMML4Wrapper
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("displayName",fullS);
        map.put("model",utils.context);
        map.put("dataType",$type);
    System.out.println(map);
    applyTemplate("modelQuestion.drlt", utils, registry, map, theory);
    applyTemplate("modelQuestionBinding.drlt", utils, registry, map, theory);
    applyTemplate("modelQuestionRebinding.drlt", utils, registry, map, theory);
    applyTemplate("modelCreateByBinding.drlt", utils, registry, map, theory);
end


rule "Question_Multi"
dialect "java"
when
    MiningSchema(  $inputs : miningFields )
    $fld : MiningField( this memberOf $inputs,  $name : name, usageType == null || usageType == FIELDUSAGETYPE.ACTIVE )
    TypeOfField( name == $name, $type : dataType )
    $dfld : DataField( $vals : values, $vsize : values.size() > 0, name == $name, $full : displayName )
    $validz : List( size > 0 ) from accumulate(
                        $val : Value( property == null || (property != "missing" && property != "invalid") ) from $vals ,
                        init( List validz = new java.util.LinkedList(); ),
                        action( validz.add(utils.format($dfld,$val)); ),
                        result( validz )
                      )

then
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("fullName",$full);
        map.put("model",utils.context);
        map.put("dataType",$type);
        map.put("valid",$validz);
        map.put("invalid",new java.util.ArrayList());
        map.put("missing",new java.util.ArrayList());
    applyTemplate("modelMultiQuestion.drlt", utils, registry, map, theory);
    applyTemplate("modelQuestionBinding.drlt", utils, registry, map, theory);
    applyTemplate("modelQuestionRebinding.drlt", utils, registry, map, theory);
    applyTemplate("modelCreateByBinding.drlt", utils, registry, map, theory);
end


   //TODO Replicate for derivedFields in place of datafields




rule "Output_Predicted_AsNotes"
when
    MiningSchema(  $inputs : miningFields )
    $fld : MiningField( this memberOf $inputs,  $name : name, usageType == FIELDUSAGETYPE.PREDICTED )
//    TypeOfField( name == $name, $type : dataType )
    $dfld : DataField( name == $name, $full : displayName )
then
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("fullName",$full);
        map.put("model",utils.context);
        map.put("outType","Predicted");
//        map.put("dataType",$type);
    applyTemplate("modelOutputBinding.drlt", utils, registry, map, theory);
end



rule "Outputs_AsNotes_Data"
when
    OutputField( $name : name, $tgt : targetField )
    $dfld : DataField( name == $tgt, $full : displayName )
then
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("fullName",$full);
        map.put("model",utils.context);
        map.put("outType","Out");
//        map.put("dataType",$type);
    applyTemplate("modelOutputBinding.drlt", utils, registry, map, theory);
end



rule "Outputs_AsNotes_Derived"
when
    OutputField( $name : name, $tgt : targetField )
    $dfld : DerivedField( name == $tgt, $full : displayName )
    not DataField( name == $tgt )
then
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("fullName",$full);
        map.put("model",utils.context);
        map.put("outType","Out");
//        map.put("dataType",$type);
    applyTemplate("modelOutputBinding.drlt", utils, registry, map, theory);
end