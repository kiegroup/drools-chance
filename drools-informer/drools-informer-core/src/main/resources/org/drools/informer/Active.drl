/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.informer;
import org.drools.informer.Questionnaire;
import org.drools.informer.Question;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Set;






rule "build list of available items"
no-loop
when
	$questionnaire : Questionnaire( $oldAvailableItems : availableItemSet, $items : itemList )
	$newItems : Set( this != $oldAvailableItems ) from accumulate (
	        Item( $id : id != $questionnaire.id,
	              id memberOf $items,
	              active == true ),
	        collectSet( $id )
	    )
then
    modify ( $questionnaire ) {
        setAvailableItems( $newItems );
    }
end





rule "return from navigation branch"
salience 5 // before : activate top-level item (if Questionnaire.activeItem is used)
when
	$questionnaire : Questionnaire( activeItem == "#return" )
then
	$questionnaire.navigationReturn();
	update( $questionnaire );
end

rule "activate top-level item (if Questionnaire.activeItem is used)"
no-loop
salience 4 // before: "activate/deactivate lower-level items (if Questionnaire.activeItem is used)"
when
	$questionnaire : Questionnaire( activeItem != null )
	$item : Item( id memberOf $questionnaire.itemList,
	              id == $questionnaire.activeItem,
	              active == false )
then
    modify ( $item ) {
	    setActive(true);
	}
end

rule "deactivate top-level items (if Questionnaire.activeItem is used)"
no-loop
salience 4 // before: "activate/deactivate lower-level items (if Questionnaire.activeItem is used)"
when
	$questionnaire : Questionnaire( activeItem != null )
	$item : Item( id memberOf $questionnaire.itemList,
	              id != $questionnaire.activeItem,
	              active == true )
then
    modify ( $item ) {
        setActive(false);
	}
end



rule "activate lower-level items (if Questionnaire.activeItem is used)"
no-loop
salience 3 // before: "activate/deactivate InvalidAnswers"
when
	$questionnaire : Questionnaire(activeItem != null )
	$item : Item( id != $questionnaire.id,
	              id not memberOf $questionnaire.itemList,
	              active == false )
	exists Group( id != $questionnaire.id, itemList contains $item.id,
	             active == true )
then
    modify ( $item ) {
	    setActive(true);
	}
end

rule "deactivate lower-level items (if Questionnaire.activeItem is used)"
no-loop
salience 3 // before: "activate/deactivate InvalidAnswers"
when
	$questionnaire : Questionnaire(activeItem != null )
	$item : Item( id != $questionnaire.id,
	              id not memberOf $questionnaire.itemList,
	              active == true )
	not Group( id != $questionnaire.id, itemList contains $item.id,
	           active == true )
then
    modify ( $item ) {
	    setActive(false);
	}
end










rule "activate everything (if Questionnaire.activeItem is not used)"
salience 3 // before: "activate/deactivate InvalidAnswers"
when
	$questionnaire : Questionnaire(activeItem == null )
	$item : Item( id != $questionnaire.id, active == false )
then
    modify ( $item ) {
	    setActive( true );
    }
end

rule "activate/deactivate InvalidAnswers"
salience 2 // before: "propagate readonly from group to questions or subgroups"
when
	$question : Question()
	$invalidAnswer : InvalidAnswer( questionId == $question.id, active != $question.active );
then
    modify ( $invalidAnswer ) {
	    setActive( $question.isActive() );
	}
end

rule "retract invalid answers for inactive questions"
salience -1000 // ensure this is the last rule in the Agenda Group to fire
when
    $invalidAnswer : InvalidAnswer();
    $question : Question( $id : id == $invalidAnswer.questionId, active == false )
    $questionnaire : Questionnaire( enableActionValidation == true, itemList contains $id )
then
    retract( $invalidAnswer );
end

rule "deactivate orphan InvalidAnswers"
salience 2 // before: "propagate readonly from group to questions or subgroups"
when
	$invalidAnswer : InvalidAnswer( active == true )
	not ( exists Question( id == $invalidAnswer.questionId ) )
then
    modify ( $invalidAnswer ) {
	    setActive( false );
	}
end
