/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.informer;


import java.lang.annotation.Annotation;
import org.drools.informer.generator.annotations.Questionable;
import org.drools.informer.generator.annotations.QuestionMark;
import org.drools.informer.generator.annotations.AllowedAnswers;
import org.drools.informer.generator.GeneratorTemplateManager;
import org.drools.informer.generator.ResourceHolder;
import org.drools.informer.generator.ISurveyable;

import org.drools.informer.Group;
import org.drools.informer.InvalidAnswer;
import org.drools.informer.Question;
import org.drools.informer.Questionnaire;
import org.drools.informer.MultipleChoiceQuestion;
import org.drools.informer.MultipleChoiceQuestion.PossibleAnswer;
import org.drools.informer.Note;
import org.drools.informer.Item;
import org.drools.informer.DomainModelAssociation;
import org.drools.informer.Answer;
import org.drools.informer.domain.DomainModelSupport;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

import org.drools.agent.KnowledgeAgent;

import org.drools.builder.ResourceType;
import org.drools.io.Resource;
import org.drools.io.impl.ByteArrayResource;
import org.drools.io.impl.ChangeSetImpl;

import org.drools.informer.util.AnnotationHelper;


import java.lang.reflect.Field;


global KnowledgeAgent kAgent;


// Helper object for cleaning things up
declare SurveyableMarker
    id : String     @key
end

declare ISurveyable end

declare trait ISurveyableTrait extends ISurveyable end



rule "SurveyableMarker"
salience 100
when
    $i : ISurveyable( $id : questionnaireId, surveyEnabled == true )
    not SurveyableMarker( id == $id )
then
    insert( new SurveyableMarker($id) );
end



rule "Questionnaire_Auto"
when
    $o   : ISurveyable( $id : questionnaireId, surveyEnabled == true )
    $k1  : Class( $name : name ) from $o.getClass()
    $ann : Questionable(
                            $lab : label,
                            $lang : language
                       ) from $k1.getAnnotations()
           not Questionnaire( id == $id, type == $name )
then
    Questionnaire quest = new Questionnaire();
        quest.forceId( $id );
        quest.setContext( $id );
        quest.setLabel( $lab );
        quest.setDefaultLanguage( $lang );
        quest.setType( $o.getClass().getName() );
    insert(quest);
end



rule "Question_Auto"
salience 1
when
    $o   : ISurveyable( $id : questionnaireId, surveyEnabled == true )
    $k1  : Class() from $o.getClass()
           Questionable( ) from $k1.getAnnotations()
    $qst : Questionnaire( $ctx : context == $id )
    $fld : Field( $fldName : name, $fldKlass : class ) from AnnotationHelper.getFields( $k1 )
    $qm  : QuestionMark( $lab : label, $qType : type,
                         $req : required,
                         $dateFormat : dateFormat,
                         $oneShot : finalAnswer
                         ) from $fld.getAnnotations()
           not AllowedAnswers() from $fld.getAnnotations()
           not Question( context == $id, type == $fldName ) @watch( * )
then
    Question q = new Question( $fldName, $lab );
        q.setContext( $id );
        q.setAnswerType( $qType );
        q.setRequired( $req );
        q.setFinalAnswer( $oneShot );
        q.setDateFormat( $dateFormat );


    modify ( $qst ) {
        addItem( q.getId() );
    }
    insert( q );

    DomainModelAssociation dma = new DomainModelAssociation( );
        dma.setObject( (Object) $o );
        dma.setQuestionId( q.getId() );
        dma.setContext( $id );
        dma.setProperty( $fldName );
    insert( dma );
end




rule "MultipleChoice_Question_Auto"
salience 1
when
    $o   : ISurveyable( $id : questionnaireId, surveyEnabled == true )
    $k1  : Class() from $o.getClass()
           Questionable( ) from $k1.getAnnotations()
    $qst : Questionnaire( $ctx : context == $id, $items : itemList  )
    $fld : Field( $fldName : name, $fldKlass : class ) from AnnotationHelper.getFields( $k1 )
    $q   : QuestionMark( $lab : label, $qType : type,
                         $req : required ) from $fld.getAnnotations()
           AllowedAnswers( $ansValues : values ) from $fld.getAnnotations()
       not MultipleChoiceQuestion( context == $id, type == $fldName ) @watch( * )
then
    MultipleChoiceQuestion mcq = new MultipleChoiceQuestion( $fldName, $lab );
        mcq.setContext( $id );
        mcq.setAnswerType( $qType );
        mcq.setRequired( $req );
        mcq.setPreLabel( $lab );
        mcq.setPossibleAnswersByValue( $ansValues );


    modify ( $qst ) {
        addItem( mcq.getId() );
    }
    insert( mcq );

    DomainModelAssociation dma = new DomainModelAssociation( );
        dma.setObject( (Object) $o );
        dma.setQuestionId( mcq.getId() );
        dma.setContext( $id );
        dma.setProperty( $fldName );
    insert( dma );
end









rule "Whens"
no-loop
salience 1
when
    $o   : ISurveyable( $id : questionnaireId, surveyEnabled == true )
    $k1  : Class() from $o.getClass()
           Questionable( ) from $k1.getAnnotations()
    eval ( kAgent != null )
    $fld : Field( $fldName : name, $fldKlass : class ) from $k1.getDeclaredFields()
    $q   : QuestionMark( $whenCondition : whenCondition != "" ) from $fld.getAnnotations()
    not    ResourceHolder( id == $id, target == $fldName )
then
    java.util.Map map = new java.util.HashMap();
        map.put("context",$id);
        map.put("questType",$fldName);
        map.put("klass",$o.getClass().getName());
        map.put("whenClause",$whenCondition);

      System.out.println("----------------------------------------------------------"+$fld+ "-->>"+$fldName + "question: "+$q);
    String drl = "package org.drools.informer \n";
    drl += GeneratorTemplateManager.getInstance().applyTemplate("detachQuestion.drlt", $o, map);
    drl += GeneratorTemplateManager.getInstance().applyTemplate("attachQuestion.drlt", $o, map);


    System.out.println("----------------------------------------------------------");

    ByteArrayResource bar = new ByteArrayResource(drl.getBytes());
        bar.setResourceType(ResourceType.DRL);
        ChangeSetImpl changeSet = new ChangeSetImpl();
            changeSet.setResourcesAdded(Arrays.asList((Resource) bar));

    ResourceHolder rh = new ResourceHolder($id, $fldName, bar);
    insert(rh);

    kAgent.applyChangeSet(changeSet);

end





rule "Clean Rules"
salience -999
when
    $rh : ResourceHolder( $id : id, $res : res )
    not   ISurveyable( questionnaireId == $id, surveyEnabled == true  )
    eval ( kAgent != null )
then
    ChangeSetImpl changeSet = new ChangeSetImpl();
        changeSet.setResourcesRemoved(Arrays.asList((Resource) $res));
    kAgent.applyChangeSet(changeSet);
    retract($rh);
end


rule "Cleanup"
salience -100
when
           SurveyableMarker( $id : id )
    not    ISurveyable( questionnaireId == $id, surveyEnabled == true )
    $obj : InformerObject( context == $id  )
then
    retract( $obj );
end

rule "Cleanup_final"
salience -110
when
    $marker : SurveyableMarker( $id : id )
    not       ISurveyable( questionnaireId == $id, surveyEnabled == true  )
then
    retract( $marker );
end

