/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.informer

import org.drools.informer.util.Ans;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.drools.informer.MultipleChoiceQuestion.PossibleAnswer;




rule "lookup question id by type and context"
salience 99
when
    $ans        : Answer( questionId == null, $ctx : questionContext, $type : questionType )
    $quest      : Question( $qid : id, context == $ctx, type == $type )
then
    modify ( $ans ) {
	    setQuestionId( $qid );
    }
end


rule "retract all prior validation errors when a new answer is given"
salience 4 // before: "copy new answers into the corresponding questions"
when
	Answer( questionId : questionId )
	$invalidAnswer : InvalidAnswer( questionId == questionId )
then
	retract( $invalidAnswer );
end




rule "Convert blank string and 'null' string to real null"
salience 31
when
    $a : Answer( value == "" || value == "null" )
then
    modify ( $a ) {
        setValue( null );
    }
end


rule "Unanswer questions"
salience 30 // before: "discard invalid multiple choice answers"
when
	$answer     : Answer( questionId : questionId, answerValue : value == null );
	$question   : Question( id == questionId, finalAnswer == false, $basicAnswerType : basicAnswerType  )
then
	retract( $answer );
	modify ( $question ) {
        fit( null, $basicAnswerType );
    }
end




rule "copy new answers into the corresponding questions"
salience 30 // before: "discard invalid multiple choice answers"
when
    answer      : Answer( questionId : questionId, answerValue : value != null )
	$question   : Question( id == questionId, basicAnswerType : basicAnswerType,
	                    finalAnswer == false || lastAnswer == null )
then
	retract(answer);

	try {
	    modify ( $question ) {
            fit( answerValue, basicAnswerType );
        }
	} catch (NumberFormatException e) {
		InvalidAnswer invalidAnswer = new InvalidAnswer(questionId,
		                                                "invalid",
		                                                "This is not a valid number");
		insert(invalidAnswer);
	} catch (ParseException e) {
		InvalidAnswer invalidAnswer = new InvalidAnswer(questionId,
		                                                "invalid",
		                                                "This is not a valid value");
		insert(invalidAnswer);
	}
end

rule "discard invalid multiple choice answers"
salience 20 // before: "copy question answers to the underlying domain model"
when
	$question   : MultipleChoiceQuestion( questionId : id, answered == true, $answers : answerItems != null, $possibleAnswers : possibleAnswers ) @watch(*)
	$s          : String() from $answers
    not           PossibleAnswer( value == $s ) from $possibleAnswers
then
	InvalidAnswer invalidAnswer = new InvalidAnswer( questionId,
		                                             "invalid",
		                                             $answers + " is not a possible answer " );
	insertLogical( invalidAnswer );
	modify ( $question ) {
	    setAnswer( null );
	}
end



rule "retract orphan answers"
salience -1 // after: any rules that create questions
when
	$answer     : Answer( questionId : questionId );
	not           Question( id == questionId )
then
	retract($answer);
end


rule "required questions answered"
salience -1 // after: any rules that create questions
when
	$question   : Question( required == true, answered == false ) @watch(*)
then
	InvalidAnswer invalidAnswer = new InvalidAnswer($question.getId(), "You must answer this question");
	invalidAnswer.setType("invalid");
	insertLogical(invalidAnswer);
end

rule "questions missing answers"
salience -1 // after: any rules that create questions
when
	$question   : Question( required == false, answered == false ) @watch(*)
then
	InvalidAnswer invalidAnswer = new InvalidAnswer($question.getId(), "You must answer this question");
	invalidAnswer.setType("missing");
	insertLogical(invalidAnswer);
end

rule "invalid ansewer severity"
salience 1000
when
    $hig : InvalidAnswer( $qid : questionId, type == "invalid" )
    $low : InvalidAnswer( questionId == $qid, type == "missing" )
then
    retract( $low );
end



rule "has invalid answers"
salience -2 // after: any rules that create invalid answers
when
	$quest      : Questionnaire( invalidAnswers == false )
    exists        InvalidAnswer()
then
    modify ( $quest ) {
        setInvalidAnswers( true );
    }
end


rule "doesn't have invalid answers"
salience -2 // after: any rules that create invalid answers
when
	$quest      : Questionnaire( invalidAnswers == true )
	not           InvalidAnswer()
then
    modify ( $quest ) {
	    setInvalidAnswers( false );
	}
end


//rule "removeFinalQuestions"
//no-loop
//when
//    $q          : Question( $id : id, finalAnswer == true, lastAnswer != null )
//    $quest      : Questionnaire( items contains $id )
//then
//    $quest.removeItem( $id );
//    update( $quest );
//end



rule "answer by type"
when
    $a : Ans( $val : value, $type : type, $sid : qId )
    ?getItemId( $type, $sid, $id ; )
then
    insert( new Answer( $id, $val ) );
    retract( $a );
end