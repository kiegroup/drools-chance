/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.informer;

import java.util.Set;

declare Progress
@role( event )
@duration( 0 )
    formId          : String
    percentage      : int
end

declare ProgressStatus
    formId          : String    @key
    percentage      : int
end


declare Cancel
@role( event )
    formId          : String
end

declare Failure
@role( event )
    formId          : String
end


declare Size
    formId          : String        @key
    num             : long
end

query includes( Group $master, String $qid )
    ( $master := Group( itemList contains $qid ) @watch( * ) )
    or
    (
      $master := Group( $list : itemList ) @watch( * )
      and
      $inner  := Group( id memberOf $list ) @watch( * )
      and
                 includes( $inner, $qid ; )
    )
end


query size( String $formId, long $num )
    $quest : Group( id == $formId )
    Set( $num := size ) from accumulate (
                   $q : Question( $qid : id ) @watch( * )
                    and
                    includes( $quest, $qid ; )
                ,
                collectSet ( $q )
             )
end


query progress( String $formId, int $percent )
    ProgressStatus( $formId, $percent ; )
end







rule "Questionnaire Size"
salience -5
when
    $quest : Questionnaire( $formId : id )
             size( $formId, $num ; )
then
    insertLogical( new Size( $formId, $num ) );
end

rule "Init Questionnaire Status"
when
    $quest : Questionnaire( $formId : id )
             not ProgressStatus( $formId ; )
then
    insert( new ProgressStatus( $formId, 0 ) );
end

rule "Clear Questionnaire Status"
when
    $stat  : ProgressStatus( $formId ; )
             not Questionnaire( id == $formId )
then
    retract( $stat );
end



rule "Questionnaire Progress"
salience -1000 // when questionnaire is stable
when
    $quest : Questionnaire( $formId : id ) @watch( * )
             accumulate (
                   $q : Question( $qid : id, lastAnswer != null ) @watch( * )
                    and
                    not InvalidAnswer( questionId == $qid )
                    and
                    includes( $quest, $qid; )
                ,
                $num : count ( $q )
             )
             Size( formId == $formId, $max : num > 0 )
then
    Progress p = new Progress( $formId, (int) Math.round( 100.0 * $num.doubleValue() / $max ) );
    System.out.println( "Making progress.... " + p );
    insertLogical( p );
end

rule "Update Status"
no-loop
when
    $pro    : Progress( $formId, $latestPerc ; )
    $state  : ProgressStatus( $formId ; percentage != $latestPerc )
then
    modify ( $state ) {
        setPercentage( $latestPerc );
    }
end

rule "Override Progress"
when
    $new : Progress( $id : formId )
    $old : Progress( formId == $id, this != $new )
then
    retract( $old );
end

rule "Clean status events"
when
    $p : Progress( $id : formId )
    not  Questionnaire( id == $id )
then
    retract( $p );
end


