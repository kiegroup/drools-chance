/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.informer.presentation;

import org.drools.informer.xml.*;
import org.drools.informer.*;
import org.drools.informer.MultipleChoiceQuestion.PossibleAnswer;



rule "Link Survey"
when
    $ticket : SurveyTicket( $id : sid, questionnaire == null )
    $quest  : Questionnaire( id == $id )
then
    $ticket.setQuestionnaire( $quest );
    update($ticket);
end


rule "Bind Survey"
no-loop
when
    $quest  : Questionnaire( $id : id )
    not SurveyTicket( sid == $id )
then
    SurveyTicket ticket = new SurveyTicket( $id );
        ticket.setQuestionnaire( $quest );
    insert( ticket );
end

rule "Clean ticket"
no-loop
when
    $t : SurveyTicket( questionnaire != null, $qid : questionnaire.id )
    not  Questionnaire( id == $qid )
then
    retract( $t );
end


rule "Clean adapters"
when
    $gui : GUIAdapter( $id : itemId )
    not    Item( id == $id )
then
    retract( $gui );
end




rule "Create_GUI_Adapter"
dialect "mvel"
no-loop
when
    $t : SurveyTicket( $sid : sid,
                       questionnaire != null,
                       $context : guiContext,
                       $inter : guiInteractive )
    $q : Questionnaire( id == $sid,
                   $lab : label,
                   $lang : defaultLanguage,
                   $type : type
                   )
    not SurveyGUIAdapter( itemId == $sid )
then
    SurveyGUIAdapter qa = new SurveyGUIAdapter();
        qa.itemId = $sid;
        qa.name = $lab;
        qa.language = $lang;
        qa.surveyClass = $type;
        qa.contextDesc = $context;
        qa.interactive = $inter;
        qa.surveyQuestions = new java.util.LinkedList();
    insert(qa);


    ChangeGUIAdapter cga = new ChangeGUIAdapter();
        cga.itemId = $sid;

        cga.newQuestions = new java.util.LinkedList();
        cga.deletedQuestions = new java.util.LinkedList();
        cga.updatedQuestions = new java.util.LinkedList();
    insert(cga);
end





rule "Add_GUI_Questions"

when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $q : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType, $qName : type )
    Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    not QuestionGUIAdapter( itemId == $qid ) from $guiQuestions
then
    QuestionGUIAdapter qga = new QuestionGUIAdapter();
        qga.setItemId($qid);
        qga.setQuestionName($qName);
        qga.setPreLabel($qLab);
        qga.setRequired($req);
        qga.setCurrentAnswer( $q.getLastAnswer() );
        qga.setAnswerType($type.getValue());
        qga.setValidationMessage( $q.getPostLabel() );
    $sga.getSurveyQuestions().add(qga);
    insert(qga);
    update($sga);
end



rule "Valid_GUI_Questions"
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $q : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType, $qName : type, $last : lastAnswer != null )
    Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    $qga : QuestionGUIAdapter( itemId == $qid )
    not InvalidAnswer( questionId == $qid )
then
    $qga.setSuccessType( "valid" );
end

//rule "Missing_GUI_Questions"
//when
//    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
//    $q : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType, $qName : type )
//    Questionnaire( id == $sid, itemList contains $qid )
//    $qga : QuestionGUIAdapter( itemId == $qid )
//    not InvalidAnswer( questionId == $qid )
//then
//    $qga.setSuccessType( "missing" );
//end

rule "InvalidOrMissing_GUI_Questions"
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $q : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType, $qName : type )
    Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    $qga : QuestionGUIAdapter( itemId == $qid )
    InvalidAnswer( questionId == $qid, $failType : type )
then
    $qga.setSuccessType( $failType );
end

rule "Final_GUI_Questions"
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $q : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType, $qName : type, $last : lastAnswer != null, finalAnswer == true )
    Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    $qga : QuestionGUIAdapter( itemId == $qid )
then
    $qga.setAction( "disable" );
end





rule "BooleanQuestions"
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $q : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType == Question.QuestionType.TYPE_BOOLEAN )
    $qga : QuestionGUIAdapter( itemId == $qid, possibleAnswers == null)
then
    $qga.setPossibleAnswers( new java.util.ArrayList() );
    $qga.getPossibleAnswers().add( new PossibleAnswer("true", "Yes") );
    $qga.getPossibleAnswers().add( new PossibleAnswer("false", "No") );
    update($qga);
end




rule "Synch_GUI_Questions"

when
    $q   : Question( $qid : id, $qLab : preLabel, $post : postLabel, $req : required, $type : answerType, $qName : type )
    $qga : QuestionGUIAdapter( itemId == $qid )
then
    $qga.setCurrentAnswer( $q.getLastAnswer() );
    $qga.setValidationMessage( $q.getPostLabel() );
end

rule "Init_MultipleChoice"
salience 100
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $qst : MultipleChoiceQuestion( $qid : id, $poss : possibleAnswers, $single : singleAnswer )
           Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    $qga : QuestionGUIAdapter( itemId == $qid, $possAnswers : possibleAnswers == null )
then
    modify ( $qga ) {
        setPossibleAnswers( new java.util.LinkedList() );
    }
end




rule "Add_MultipleOptions"
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $qst : MultipleChoiceQuestion( $qid : id, $poss : possibleAnswers, $single : singleAnswer )
           Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    $qga : QuestionGUIAdapter( itemId == $qid, $possAnswers : possibleAnswers != null )
    $pa  : MultipleChoiceQuestion.PossibleAnswer( $key : label, $val : value, this not memberOf $possAnswers ) from $poss
then
    $qga.setSingleAnswer( "" + $single );
    // possibleAnswers are read-only, so let's just add them directly
    $possAnswers.add( $pa );
end

rule "Clear obsolete multiple options"
when
    $sga : SurveyGUIAdapter( $sid : itemId, $guiQuestions : surveyQuestions)
    $qst : MultipleChoiceQuestion( $qid : id, $poss : possibleAnswers, $single : singleAnswer )
           Questionnaire( id == $sid, itemList contains $qid ) @watch( items )
    $qga : QuestionGUIAdapter( itemId == $qid, $possAnswers : possibleAnswers != null )
    $pa  : MultipleChoiceQuestion.PossibleAnswer( $key : label, $val : value, this not memberOf $poss ) from $possAnswers
then
    $possAnswers.remove( $pa );
end






rule "On Some Delete"
salience -1000
when
    $cga : ChangeGUIAdapter( $sid : itemId )
    $cc : ChangeCollector()
    Questionnaire( id == $sid )
    $xo : ItemId( $xid : id ) from $cc.getDelete()
then
    $cga.getDeletedQuestions().add($xid);
end


rule "On Some Change"
salience -1000
when
    $cga : ChangeGUIAdapter( $sid : itemId )
    $cc : ChangeCollector()
    Questionnaire( id == $sid )
    $xo : Question( $qid : id ) from $cc.getUpdate()
    $qga : QuestionGUIAdapter( itemId == $qid )
then
    $cga.getUpdatedQuestions().add($qga);
end

rule "On Some New"
salience -1000
when
    $cga : ChangeGUIAdapter( $sid : itemId )
    $cc : ChangeCollector()
    Questionnaire( id == $sid )
    $xo : Question( $qid : id ) from $cc.getCreateList()
    $sga : SurveyGUIAdapter( itemId == $sid)
    $qga : QuestionGUIAdapter( itemId == $qid ) from $sga.getSurveyQuestions()
then
    $cga.getNewQuestions().add($qga);
end

//rule "On Some New"
//salience -1000
//when
//    $cga : ChangeGUIAdapter( $sid : itemId )
//    Questionnaire( id == $sid )
//    $xo : Question( $qid : id, context == $sid )
//    $sga : SurveyGUIAdapter( itemId == $sid )
//    $qga : QuestionGUIAdapter( itemId == $qid ) from $sga.getSurveyQuestions()
//then
//    $cga.getNewQuestions().add( $qga );
//end


rule "Progress"
when
    ProgressStatus( $sid, $perc ; )
    $cga : ChangeGUIAdapter( $sid == itemId, progress != $perc )
then
    modify ($cga) {
        setProgress( $perc ),
        setDirty( true );
    }
end

rule "Link progress"
when
    $p : ProgressStatus( $formId, $percentage ; )
    $s : SurveyGUIAdapter( itemId == $formId, progress != $percentage )
then
    System.out.println("SETTING GUI PROGRESS TO " + $percentage );
    modify ($s) {
        setProgress( $percentage );
    }
end



rule "Invalidations"
when
    InvalidAnswer( $qid : questionId, $msg : reason, $type : type != "missing" )
then
    System.out.println( "INVALIDATE ! " + $qid + " due to " + $type );
    insert( new QuestionInvalidate( $qid ) );
end

rule "Finalizations"
when
    Question( $qid : id, finalAnswer == true, answered == true )
then
    System.out.println( "FINALIZE ! " + $qid );
    insert( new QuestionFinalize( $qid ) );
end




rule "Late cleanup"
salience -9999
when
    // if no rule is interested, expire it
    $qu : QuestionUpdate()
then
    retract( $qu );
end

