/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.informer.interaction;


import org.drools.base.DroolsQuery;
import org.drools.informer.generator.*;
import org.drools.informer.*;


import java.util.List;


declare enum InteractionTypes
    NOTIFICATION, QUESTIONNAIRE, ACTION, UNSPECIFIED;
end



declare InteractionTicket
    id              : String
    interactions    : List      // <Interaction>
    source          : Object
end

declare TicketActor
    interactionId   : String   @key
    ticketId        : String
    actorId         : String
end


declare Interaction
    type            : InteractionTypes
    bodyTemplateIds : List
    receivers       : List       // <String>
    channels        : List
    timeouts        : List
end

declare TaskInteraction extends Interaction
    lockdown        : boolean   = true
    tasks           : List      = new java.util.ArrayList()
    triggers        : List      = new java.util.ArrayList()
    autocomplete    : boolean   = true
end


declare Alert
@role( event )
    ticketId        : String    @key
    destination     : String    @key
    formId          : String    @key
    bodyTemplateId  : String
    channel         : String
    timeout         : String
end






query ticket( String $className, String $formId, InteractionTicket $ticket )
    $ticket := InteractionTicket( id == $formId )
end

     //TODO : Check that it works!
//query conversationAlerts( String $ticketId, String $actorId, List $formIds, List $bodies, List $channels )
//    accumulate (
//                 Alert( $ticketId, $actorId, $formId, $body, $channel; ),
//                 $formIds  : collectList( $formId ),
//                 $bodies   : collectList( $body ),
//                 $channels : collectList( $channel )
//               )
//end

rule "Open interaction"
salience 999
when
    $ticket : InteractionTicket( $id : id,
                                 $inters : interactions )
    $inter  : Interaction( /*receivers.size > 0*/ ) from $inters
then
    System.out.println( "Inserting interaction " + $inter + " for ticket " + $ticket );
    insertLogical( $inter );
end

rule "Interactions"
when
    $ticket : InteractionTicket( $ticketId : id,
                                 $inters : interactions )
    $inter  : Interaction( $type : type, this memberOf $inters,
                           $receivers : receivers, receivers.size() > 0, $receiver : receivers[0],
                           $body : bodyTemplateIds[0],
                           $channel : channels[0] )
    not       InteractiveTask( args contains $inter )
then
    String taskId = java.util.UUID.randomUUID().toString();
    InteractiveTask t = new InteractiveTask( taskId );
//        t.setOwner( (String) $receiver );
        t.setPotentialOwners( new java.util.ArrayList( $receivers ) );
        t.setSimple( $receivers.size() > 0 );
        t.setPersistent( true );
        t.getArgs().add( $inter );
    System.out.println( "Inserting (interactive)task " + t );
    insert( t );
    insert( new TaskStateTransition( taskId, TaskTransitions.ACTIVATE, (String) $receiver, new Date() ) );
end


rule "Start notification tasks"
when
    $inter : Interaction( type == InteractionTypes.NOTIFICATION )
    $task  : InteractiveTask( $taskId : taskId, args contains $inter, state == TaskStates.READY )
then
    System.out.println( "Starting notification interaction, implicitly " );
    insert( new TaskStateTransition( $taskId, TaskTransitions.START, null, new Date() ) );
end



rule "Alerts notification"
salience -1
when
    $ticket : InteractionTicket( $ticketId : id,
                                 $inters : interactions )
    $inter  : Interaction( $type : type, this memberOf $inters,
                           receivers.size() > 0, $receiver : receivers[0],
                           bodyTemplateIds != null, $body : bodyTemplateIds[0],
                           channels != null, $channel : channels[0],
                           timeouts != null, $timeout : timeouts[0])
    $task   : InteractiveTask( $tid : taskId, $formId : controlQuestId != null, args contains $inter )
then
    Alert alert = new Alert( $ticketId, (String) $receiver, $formId, (String) $body, (String) $channel, (String) $timeout );
    System.out.println( "Inserting alert " + alert + " @@using ctrolQ " + $formId );
    insertLogical( alert );
end












rule "Alerts"
no-loop
salience 1000
when
    $al     : Alert( $ticketId, $dest, $formId ; )
              not TicketActor( $convoId, $ticketId, $dest ; )
then
    String convoId = java.util.UUID.randomUUID().toString();
    System.out.println( " ******************************* " + $al );
    System.out.println( " ************************leads to TicketActor( " + convoId + " , " + $ticketId +" , " + $dest + ") " );
    insert( new TicketActor( convoId, $ticketId, $dest ) );
end


rule "Clean actors"
when
    $tk : TicketActor( $convoId, $ticketId, $dest ; )
    not   Alert( ticketId == $ticketId )
then
    System.out.println( "REMOVAL OF ACTOR ticket !");
    retract( $tk );
end
















rule "Escalation"
timer( expr: $timeout ;  )
when
    $ticket : InteractionTicket( $id : id,
                                 $inters : interactions )
    $inter  : Interaction( $type == InteractionTypes.NOTIFICATION, $bodies, $receivers, $channels, $timeouts ; this memberOf $inters, $receivers.size() > 1 )
    $task   : InteractiveTask( $tid : taskId, args contains $inter )
    $alert  : Alert( $id, $dest, $formId, $templ, $channel, $timeout ; destination memberOf $receivers )
    not       TaskStateTransition( $tid ; )
then
    retract( $alert );
    System.out.println( " Interaction is NOW " + $inter );
    modify( $inter ) {
        getReceivers().remove( 0 ),
        getChannels().remove( 0 ),
        getTimeouts().remove( 0 ),
        getBodyTemplateIds().remove( 0 );
    }
    insert( new TaskStateTransition( $tid, TaskTransitions.DELEGATE, (String) $receivers.get( 0 ), new Date() ) );
    insert( new TaskStateTransition( $tid, TaskTransitions.START, (String) $receivers.get( 0 ), new Date() ) );
end


rule "Escalation Failure"
timer( expr: $timeout ;  )
when
    $ticket : InteractionTicket( $id : id,
                                 $inters : interactions )
    $inter  : Interaction( $type == InteractionTypes.NOTIFICATION, $body, $receivers, $channels ; this memberOf $inters, $receivers.size() <= 1 )
    $task   : InteractiveTask( $tid : taskId, args contains $inter )
    $alert  : Alert( $id, $dest, $formId, $templ, $channel; $timeout : timeout != null, destination memberOf $receivers )
    not       TaskStateTransition( $tid ; )
then
    System.out.println( $dest + " did not answer " + $alert );
    retract( $alert );
    System.out.println( " Interaction is FAILED " + $inter );

    modify( $inter ) {
        getReceivers().remove( 0 ),
        getChannels().remove( 0 );
    }
    insert( new TaskStateTransition( $tid, TaskTransitions.ERROR, null, new Date() ) );
end



rule "Completion"
when
    $ticket : InteractionTicket( $id : id,
                                 $inters : interactions )
    $inter  : Interaction( $type, $body, $receivers, $channels ; this memberOf $inters )
    $task   : InteractiveTask( $tid : taskId, args contains $inter,
                               state == TaskStates.COMPLETED
                                  || == TaskStates.FAILED
                                  || == TaskStates.ERROR
                                  || == TaskStates.OBSOLETE
                                  || == TaskStates.EXITED )
then
    System.out.println( "Task completed, one way or another " );
    retract( $task );
    retract( $inter );
end



rule "Clean interaction tickets"
salience -9999
when
    $ticket : InteractionTicket( $inters : interactions )
    not       Interaction( this memberOf $inters )
then
    retract( $ticket );
end









rule "Insert Questionnaire triggers on a start"
no-loop
when
    $inter : TaskInteraction( type == InteractionTypes.QUESTIONNAIRE, $trix : triggers )
    $task  : InteractiveTask( $taskId : taskId, args contains $inter, state == TaskStates.READY )
    $trig  : String() from $trix
then
    String newId = java.util.UUID.randomUUID().toString();
    System.out.println( "Creating questionnaire of type " + $trig + " with id " + newId + " for/from itask " + $taskId );
    ISurveyable form = FormRegistry.create( $trig, newId );
        form.setStateful( true );
    insert( form );

    modify ($inter) {
        getTasks().add( form.getQuestionnaireId() );
    }
end


rule "Inherit master owners"
no-loop
when
    $inter      : TaskInteraction( $tasks : tasks, lockdown == true )
    $master     : InteractiveTask( $taskId : taskId, args contains $inter, $owner : owner != null, $owners : potentialOwners != null )
    $slave      : HumanTask( taskId memberOf $tasks, owner == null, potentialOwners == null )
then
    modify ($slave) {
        setOwner( $owner ),
        setPotentialOwners( $owners );
    }
end





rule "Lockdown"
no-loop
when
    $inter      : TaskInteraction( $tasks : tasks, lockdown == true )
    $master     : InteractiveTask( $taskId : taskId, args contains $inter, $qid : controlQuestId, state == TaskStates.IN_PROGRESS )
    $ctrl       : Questionnaire( id == $qid )
    exists        HumanTask( taskId memberOf $tasks, state != TaskStates.COMPLETED )
then
    System.out.println("********************* Locking controlQuest for " + $master );
    //TODO --> set to readonly
end

rule "Release"
no-loop
salience -10
when
    $inter      : TaskInteraction( $tasks : tasks, tasks.size() > 0, lockdown == true, autocomplete == true )
    $master     : InteractiveTask( $taskId : taskId, args contains $inter, $qid : controlQuestId )
    not           HumanTask( taskId memberOf $tasks, state != TaskStates.COMPLETED )
then
    System.out.println("********************* Autocompleting " + $master );
    insert( new TaskStateTransition( $taskId, TaskTransitions.COMPLETE, null, new Date() ) );
end



rule "Propagate suspsension and resume from outer to inner"
no-loop
salience 10000
when
    $inter      : TaskInteraction( $tasks : tasks, tasks.size() > 0 )
    $master     : InteractiveTask( $taskId : taskId, args contains $inter, $qid : controlQuestId )
                  TaskStateTransition( taskId == $taskId, $trans : type, type == TaskTransitions.SUSPEND || == TaskTransitions.RESUME )
    $subtask    : HumanTask( $sub : taskId, taskId memberOf $tasks )
then
    insert( new TaskStateTransition( $sub, $trans, null, new Date() ) );
end





rule "Cascade finalization from outer to inner"
no-loop
salience -10
when
    $inter      : TaskInteraction( $tasks : tasks, tasks.size() > 0 )
    $master     : InteractiveTask( $taskId : taskId, args contains $inter, $qid : controlQuestId,
                                   $state : state == TaskStates.COMPLETED || == TaskStates.FAILED
                                               || == TaskStates.ERROR || == TaskStates.OBSOLETE
                                               || == TaskStates.EXITED )
    $subtask    : HumanTask( $sub : taskId, taskId memberOf $tasks )
then
    System.out.println("********************* Subtask is obsolete " + $subtask );
    // should not affect already completed tasks
    insert( new TaskStateTransition( $sub, TaskTransitions.SKIP, null, new Date() ) );
end




rule "Inner Contagion"
no-loop
salience -10
when
    $inter      : TaskInteraction( $tasks : tasks, tasks.size() > 0 )
    $master     : InteractiveTask( $taskId : taskId, args contains $inter, $qid : controlQuestId,
                                   $state : state != TaskStates.FAILED )
    exists        HumanTask( taskId memberOf $tasks, state == TaskStates.FAILED )
then
    System.out.println("********************* Propagate inner task failure " + $master );
    insert( new TaskStateTransition( $taskId, TaskTransitions.FAIL, null, new Date() ) );
end
