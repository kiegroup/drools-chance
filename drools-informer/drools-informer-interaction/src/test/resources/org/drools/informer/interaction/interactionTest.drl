/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.informer.interaction;

import org.drools.informer.MultipleChoiceQuestion;
import org.drools.informer.MultipleChoiceQuestion.PossibleAnswer;


global java.util.List list;
global java.util.List taskLog;


rule "Init Complex Test"
when
    $s : String( this == "complexTask" )
then
    retract( $s );
    HumanTask t = new InteractiveTask();
        t.setPotentialOwners( java.util.Arrays.asList( new String[] { "dsotty", "davide" } ) );
    insert( t );
end


rule "Init Simple Test"
when
    $s : String( this == "simpleTask" )
then
    retract( $s );
    HumanTask t = new InteractiveTask();
        t.setOwner( "davide" );
        t.setSimple( true );
        t.setPersistent( true );
    insert( t );
end




rule "Test interaction"
when
    $s : String( this == "interaction test" );
then
    retract( $s );
    System.out.println( "INTERACTION SET UP" );

    InteractionTicket ticket = new InteractionTicket( java.util.UUID.randomUUID().toString(),
                                                      new java.util.ArrayList(),
                                                      $s );

    Interaction ti1 = new Interaction();
        ti1.setType( InteractionTypes.NOTIFICATION );
        ti1.setBodyTemplateIds( new java.util.LinkedList( java.util.Arrays.asList( "empty.template", "empty.template", "empty.template" ) ) );
        ti1.setReceivers( new java.util.LinkedList( java.util.Arrays.asList( "actor1", "actor2", "actor3" ) ) );
        ti1.setChannels( new java.util.LinkedList( java.util.Arrays.asList( "ALERT", "ALERT", "ALERT" ) ) );
        ti1.setTimeouts( new java.util.LinkedList( java.util.Arrays.asList( "1s", "1s", "1s" ) ) );
        System.err.println( ti1 );

    Interaction ti2 = new Interaction();
        ti2.setType( InteractionTypes.NOTIFICATION );
        ti2.setBodyTemplateIds( new java.util.LinkedList( java.util.Arrays.asList(  "empty.template", "empty.template" ) ) );
        ti2.setReceivers( new java.util.LinkedList( java.util.Arrays.asList( "main1", "alien2" ) ) );
        ti2.setTimeouts( new java.util.LinkedList( java.util.Arrays.asList( "1s", "1s", "1s" ) ) );
        ti2.setChannels( new java.util.LinkedList( java.util.Arrays.asList( "ALERT", "SMS" ) ) );

    ticket.getInteractions().add( ti1 );
    ticket.getInteractions().add( ti2 );

    insert( ticket );
end





declare SurveyBean extends Surveyable
@Questionable( label = "Name or title of the Survey", language = "EN" )

    questionnaireId : String    @key

    question1 : Integer     = 99
    @QuestionMark( type = Question.QuestionType.TYPE_NUMBER, label = "Please enter a numeric value : ", required = false )

    question2 : String
    @QuestionMark( type = Question.QuestionType.TYPE_TEXT, label = "Please enter any value : " )

end


rule "Register SB"
when
then
    FormRegistry.register( SurveyBean.class );
end


rule "Test Survey Tasks"
when
    $s : String( this == "surveytask" )
then
    retract( $s );
    System.out.println( "TASK SET UP" );

    Surveyable x = new SurveyBean( "testId" );
    x.setStateful( true );
    insert( x );
end


rule "Test Stateless Surveys"
when
    $s : String( this == "survey" )
then
    retract( $s );
    System.out.println( "TASK SET UP" );

    insert( new SurveyBean( "testId" ) );
end


rule "Remove test Survey"
when
    $s : String( this == "removesurvey" )
    $q : SurveyBean( "testId" ; )
then
    retract( $s );
    retract( $q );
end











rule "Test delegation"
when
    $s : String( this == "delegation test" );
then
    retract( $s );
    System.out.println( "INTERACTION SET UP" );

    InteractionTicket ticket = new InteractionTicket( java.util.UUID.randomUUID().toString(),
                                                      new java.util.ArrayList(),
                                                      $s );

    Interaction ti1 = new Interaction();
        ti1.setType( InteractionTypes.NOTIFICATION );
        ti1.setBodyTemplateIds( new java.util.LinkedList( java.util.Arrays.asList(  "empty.template", "empty.template" ) ) );
        ti1.setReceivers( new java.util.LinkedList( java.util.Arrays.asList( "actor1", "actor2" ) ) );
        ti1.setChannels( new java.util.LinkedList( java.util.Arrays.asList( "ALERT", "ALERT" ) ) );
        ti1.setTimeouts( new java.util.LinkedList( java.util.Arrays.asList( "500ms", "1s" ) ) );
        System.err.println( ti1 );

    ticket.getInteractions().add( ti1 );

    insert( ticket );
end





rule "Dispatch"
salience -200
when
    $ticket : InteractionTicket( $ticketId : id,
                                 $inters : interactions,
                                 $source : source  )
    $convo  : TicketActor( $convoId, $ticketId, $actorId ; )
    accumulate (
        Alert( $ticketId, $actorId, $formId, $body, $channel; ),
        $formIds  : collectList( $formId ),
        $bodies   : collectList( $body ),
        $channels : collectList( $channel );
        $channels.size() > 0
    )
then
    list.add( $actorId );
    System.out.println( "@@@@@@@ DISPATCHING to " + $actorId );
    System.out.println( "\t@@@@@@@ " + $convoId );
    System.out.println( "\t@@@@@@@ " + $formIds );
    System.out.println( "\t@@@@@@@ " + $bodies );
    System.out.println( "\t@@@@@@@ " + $channels );
end







rule "Test Survey Tasks II"

when
    $s : String( this == "surveytaskinter" )
then
    System.out.println( "TASK SET UP" );

    Surveyable x = new SurveyBean( "testId" );
    x.setStateful( true );
    insert( x );
end



rule "Test interaction with inner survey task"
when
    $s       : String( this == "surveytaskinter" )
then
    retract( $s );
    System.out.println( "TASKED INTERACTION SET UP with quest " );

    InteractionTicket ticket = new InteractionTicket( java.util.UUID.randomUUID().toString(),
                                                      new java.util.ArrayList(),
                                                      $s );

    TaskInteraction ti1 = new TaskInteraction();
        ti1.setType( InteractionTypes.QUESTIONNAIRE );
        ti1.setBodyTemplateIds( new java.util.LinkedList( java.util.Arrays.asList( "empty.template" ) ) );
        ti1.setReceivers( new java.util.LinkedList( java.util.Arrays.asList( "actor1" ) ) );
        ti1.getTriggers().add( "org.drools.informer.interaction.SurveyBean" );
        System.err.println( ti1 );

    ticket.getInteractions().add( ti1 );

    insert( ticket );
end





rule "Persist Test"
salience 1
when
    $task   : HumanTask( $tid : taskId, $state : state != null )
then
    taskLog.add( $tid + ":" + $state + ":" + $task.getOwner() );
end






//query possibleTransitionsAnswers( String $xid, String[] $answers )
//    getItemId( "transition", $xid, $qid ; )
//    MultipleChoiceQuestion( $qid := id,  $answers := possibleAnswersValues )
//end




//rule "Log Available Transitions"
//salience -1000
//when
//    HumanTask( $tid : taskId, $state : state, $owner : owner )
//    TaskTransitionHolder( taskId == $tid, $xid : questionnaireId, $designatedOwner : owner )
//    possibleTransitionsAnswers( $xid, $ans ; )
//then
//    System.out.println( "HumanTask X [ " + $state + " @ " + $owner + " ] >>>>>>>>>>>>>>>>> " + ", " + java.util.Arrays.asList( $ans ) );
//    System.out.println( "(Next designated owner is " + $designatedOwner + ")" );
//end
//



