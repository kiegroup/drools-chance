<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2011 JBoss Inc
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<bindings xmlns="http://java.sun.com/xml/ns/jaxb"
          xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
          xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
          xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
          xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:dsk="http://jboss.org/drools/drools-chance/drools-shapes/plugins/key"
          xmlns:dsp="http://jboss.org/drools/drools-chance/drools-shapes/plugins/accessor"
          xmlns:con="http://jboss.org/drools/drools-chance/drools-shapes/plugins/constructor"
          xmlns:meta="http://jboss.org/drools/drools-chance/drools-shapes/plugins/metadata"
          xmlns:annox="http://annox.dev.java.net"
          xmlns:hj="http://hyperjaxb3.jvnet.org/ejb/schemas/customizations"
          xmlns:inheritance="http://jaxb2-commons.dev.java.net/basic/inheritance"
          xsi:schemaLocation="http://java.sun.com/xml/ns/jaxb http://java.sun.com/xml/ns/jaxb/bindingschema_2_0.xsd"
          version="2.1"
          extensionBindingPrefixes="xjc annox inheritance ci dsk dsp hj con meta" >


  <bindings schemaLocation="@{schemaLocation}.xsd" node="/xsd:schema">

    @code{ targetElement = ''; if (flat) targetElement='complexType'; else targetElement='complexType'; }

    @foreach{ concept : concepts }
    <bindings node="//xsd:@{targetElement}[@name='@{concept.name}']">
        <class name="@{concept.name}Impl"/>

        <inheritance:implements>@{concept.fullyQualifiedName}</inheritance:implements>
        @if{ flat && concept.name != "org.w3._2002._07.owl.Thing" } <inheritance:implements>@{package}.@{concept.name + "$$Shadow"}</inheritance:implements> @end{}
        <inheritance:implements>com.sun.xml.bind.CycleRecoverable</inheritance:implements>
        <inheritance:implements>org.jvnet.jaxb2_commons.lang.Equals</inheritance:implements>
        <inheritance:implements>org.jvnet.jaxb2_commons.lang.HashCode</inheritance:implements>
        @if{ concept.fullyQualifiedName == "org.w3._2002._07.owl.Thing" }
            <inheritance:extends>org.drools.semantics.UIdAble</inheritance:extends>
        @else{}
            <inheritance:extends>@{concept.chosenSuper + "Impl"}</inheritance:extends>
        @end{}

        <con:default/>

        <annox:annotate>
          <annox:annotate annox:class="com.clarkparsia.empire.annotation.RdfsClass" value="tns:@{concept.name}" />
          <annox:annotate annox:class="com.clarkparsia.empire.annotation.Namespaces" value="tns @{namespace}" />
          <annox:annotate annox:class="javax.xml.bind.annotation.XmlRootElement" name="@{concept.name}Impl"/>
          <!--annox:annotate annox:class="javax.jdo.annotations.PersistenceCapable" detachable="false" identityType="javax.jdo.annotations.IdentityType.DATASTORE" /-->
        </annox:annotate>


        <ci:code><![CDATA[
          @{ extra_code[ concept.name ] }
        ]]></ci:code>


        <meta:type name="@{concept.name}">
        @foreach{ prop : concept.effectiveBaseProperties }
            <meta:property name="@{prop.name}" type="@{prop.target.fullyQualifiedName}" simple="@{ concept.lookupProperty(prop.property).simple }">
                @foreach{ subProp : concept.properties.values }
                @if{ subProp.restricted && subProp.baseProperty == prop }
                    <meta:restriction name="@{subProp.name}" type="@{subProp.target.fullyQualifiedName}" single="@{subProp.maxCard == 1}"/>
                @end{}
                @end{}
            </meta:property>
        @end{}
        </meta:type>

        <dsk:keyId>
            @foreach{ key : concept.keys }
            <dsk:key type="@{key.target.fullyQualifiedName}">@{key.name}</dsk:key>
            @end{}
        </dsk:keyId>


        @if{ concept.fullyQualifiedName == "org.w3._2002._07.owl.Thing" }
        <bindings node=".//xsd:element[@name='dyEntryId']">
            <hj:id/>
        </bindings>
        @end{}

        <dsp:accessors>
        @foreach{ propKey : properties[ concept.name ].keySet }
            @code{ prop = properties[ concept.name ][ propKey ] }
            @if{ prop.transient }
                <dsp:accessor name="@{prop.name}" type="@{prop.target.fullyQualifiedName}" primitive="@{prop.target.primitive}"
                              min="@{prop.minCard}" max="@{prop.maxCard}"
                              inherited="@{prop.isInheritedFor(concept)}" base="@{prop.baseProperty.name}" baseType="@{prop.baseProperty.target.fullyQualifiedName}" simple="@{prop.simple}">
                    @foreach{ chain : prop.chains }
                        <dsp:chain>
                            @foreach{ link : chain } <dsp:link type="@{link.domain.fullyQualifiedName}">@{link.name}</dsp:link>@end{}
                        </dsp:chain>
                    @end{}
                </dsp:accessor>
            @else{}
                <dsp:property name="@{prop.name}" type="@{prop.target.fullyQualifiedName}" primitive="@{prop.target.primitive}" restr="@{prop.addableTarget}" simple="@{prop.simple}" min="@{prop.minCard}" max="@{prop.maxCard}" />
            @end{}
        @end{}
        </dsp:accessors>

        @foreach{ propKey : properties[ concept.name ].keySet }
            @code{ prop = properties[ concept.name ][ propKey ] }
            @if{ ! prop.transient }


            @code{ nodeType = ''; if ( prop.target.primitive &&
                                       prop.maxCard <= 1 )
                                       nodeType='element';
                                       else
                                       nodeType='element'; }


            @if{ flat || ! prop.inherited }
            <bindings node=".//xsd:@{nodeType}[@name='@{prop.name}']">
                <jxb:property generateIsSetMethod="true" name="@{prop.name}">
                    @if{ "element".equals(nodeType) && ! prop.target.primitive }
                        <jxb:baseType name="@{prop.target.fullyQualifiedName}" />
                    @elseif{ prop.simple }
                        <jxb:baseType name="@{ map( prop.target.fullyQualifiedName, true ) }" />
                    @end{}
                </jxb:property>



                    <annox:annotate>
                        <annox:annotate annox:class="com.clarkparsia.empire.annotation.RdfProperty" value="tns:@{prop.name}" />
                    </annox:annotate>


                @if{ ! prop.target.primitive }
                    <annox:annotate target="field">
                            <annox:annotate target="field"
                                        annox:class="javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter"
                                        value="org.drools.semantics.ReferenceAdapter" />
                    </annox:annotate>
                @end{}



            </bindings>
            @end{}
            @end{}
        @end{}

    </bindings>
    @end{}


  </bindings>
</bindings>