@comment{
/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

}

@declare{'conceptTypeDeclare'}
package @{package};

import com.clarkparsia.empire.annotation.RdfsClass;
import com.clarkparsia.empire.annotation.Namespaces;
import com.clarkparsia.empire.annotation.RdfProperty;

import javax.persistence.CascadeType;
import javax.persistence.OneToMany;
import javax.persistence.Basic;


// @{iri}

@RdfsClass( value="tns:@{name}" )
@Namespaces({ "tns", "@{namespace}" })
public interface @{name} extends org.drools.semantics.Thing  @if{ implInterface != null} , @{ implInterface } @end{}
                                 @if{ superConcepts.size > 0 } , @foreach{ sup : superConcepts } @{sup.package}.@{compactUpperCase( sup.name ) } @end{','} @end{}
{

    @javax.xml.bind.annotation.XmlID
    public String getDyEntryId();

    public void setDyEntryId( String id );

    public String getDyEntryType();

    public void setDyEntryType(String dyEntryType);

    public boolean isDyReference();

    public void setDyReference(boolean dyReference);


@if{ properties.size > 0 }    @foreach{ propKey : properties.keySet }
    @code{ prop = properties[ propKey ] }




    // @{prop.property}   --    @{prop.maxCard}   --- @{prop.name}
    @if{ ! prop.restricted && ! prop.transient } @RdfProperty("tns:@{prop.name}") @if{ ! prop.simple } @OneToMany( cascade = CascadeType.PERSIST ) @else{} @Basic( ) @end{} @end{}
    public
        @if{ prop.maxCard == 1 }
            @{ map( prop.target.fullyQualifiedName, true ) }@if{ !prop.target.primitive }@end{}
        @else{}
            java.util.List<@{ map( prop.target.fullyQualifiedName, true ) }@if{ !prop.target.primitive }@end{}>
        @end{}

        @{ getter( prop.name, prop.target.fullyQualifiedName, prop.maxCard ) }();





    @if{ ! prop.readOnly }
    // @{prop.property}
    public void set@{ compactUpperCase(prop.name) }(
        @if{ prop.maxCard == 1 }
            @{ map( prop.target.fullyQualifiedName, true ) }@if{ !prop.target.primitive }@end{}
        @else{}
            java.util.List<@{ map( prop.target.fullyQualifiedName, true ) }@if{ !prop.target.primitive }@end{}>
        @end{}
        value );
    @end{}



    @if{ ! prop.restricted && ! prop.target.primitive && ! prop.transient }
        @javax.persistence.Transient
    public void add@{ compactUpperCase(prop.name) }( Object x );
    @end{}


    @if{ prop.simple || ( ( prop.maxCard == null || prop.maxCard > 1 ) && ! prop.transient )  }
        @javax.persistence.Transient
    public void add@{ compactUpperCase(prop.name) }( @{ map( prop.target.fullyQualifiedName, true ) } x );

        @javax.persistence.Transient
    public void remove@{ compactUpperCase(prop.name) }( Object x );
    @end{}



  @end{}  @end{}




}

@end{}

@includeNamed{'conceptTypeDeclare'}

